///////////////////////////Not The Author////////////////////////

import java.lang.reflect.*;
import java.util.Scanner;
import java.io.*;


public class TesterB {

  static Song iggy = new Song("Dum Dum Boys","Iggy Pop","The Idiot","1977");
  static Song pil = new Song("Swan Lake","Public Image Ltd.","Second Edition","1980");
  static Song femmes = new Song("Add It Up","Violent Femmes","Violent Femmes","1983");
  static Song unknown = new Song();

  public static void main(String[] args) {

    // Create a new empty song list with a description.
    ListLinked<Song> songs = new ListLinked<>();

    Song expect;
    Song result;
    int len;

    System.out.println("\n\n----   find(song), remove(song) -----");

    // Test find()
    songs.add(pil);
    songs.add(iggy);
    songs.add(femmes);
    if (songs.find(pil) != 0) {
      printFail("find song 0", 0, songs.find(pil));
    }
    if (songs.find(iggy) != 1) {
      printFail("find song 1", 1, songs.find(iggy));
    }
    if (songs.find(femmes) != 2) {
      printFail("find song 2", 2, songs.find(femmes));
    }
    if (songs.find(unknown) != -1) {
      printFail("find invalid song",-1,songs.find(unknown));
    }

    // Test remove(song)
    len = songs.length();
    songs.remove(femmes);
    if (songs.length() != len-1) {
      printFail("remove femmes, length", len-1, songs.length());
    }
    int index = songs.find(femmes);
    if (index != -1) {
      printFail("remove femmes, song",-1,index);
    }

    len = songs.length();
    songs.remove(pil);
    if (songs.length() != len-1) {
      printFail("remove pil, length", len-1, songs.length());
    }
    index = songs.find(pil);
    if (index != -1) {
      printFail("remove pil, song",-1,index);
    }

    len = songs.length();
    songs.remove(unknown);
    if (songs.length() != len) {
      printFail("remove unknown, length", len, songs.length());
    }

    System.out.println("\n\n----   sublist -----");
    // ListArray<T> sublist(int p, int r));
    ListLinked<Integer> testList = new ListLinked<>();
    for (int i=0; i<5; i++) {
      testList.add(i);
    }
    ListLinked<Integer> resultList = testList.sublist(1,3);
    for (int i=1; i<4; i++) {
      if (resultList.peek(i-1) != i) {
        printFail("sublist(1,3) i="+i,i,resultList.peek(i-1));
        break;
      }
    }

    resultList = testList.sublist(0,4);
    for (int i=0; i<5; i++) {
      if (resultList.peek(i) != i) {
        printFail("sublist(0,4) i="+i,i,resultList.peek(i));
        break;
      }
    }

    System.out.println("\n\n----   sublist -----");
    // ListArray<T> sublist(int p, int r));
    resultList = testList.sublist(1,8);
    if (resultList != null) {
      printFail("sublist invalid indices",null,resultList);
    }

    System.out.println("\n\n----   addAll(T[] toAdd) -----");

    Integer[] one = {0};
    Integer[] three = {0,1,2};
    Integer[] ten = {0,1,2,3,4,5,6,7,8,9};

    ListLinked<Integer> addTo = new ListLinked<>();
    addTo.addAll(one);
    if (addTo.length() != 1) {
      printFail("addAll one, length", 1, addTo.length());
    }
    if (addTo.peek(0) != 0) {
      printFail("addAll one",0,addTo.peek(0));
    }

    addTo.removeAll();
    addTo.addAll(three);
    if (addTo.length() != 3) {
      printFail("addAll three, length", 3, addTo.length());
    }
    for (int i=0; i<3; i++) {
      if (addTo.peek(i) != i) {
        printFail("addTo three i="+i,i,resultList.peek(i));
      }
    }

    addTo.removeAll();
    addTo.addAll(ten);
    if (addTo.length() != 0) {
        printFail("addTo ten invalid",0,addTo.length());
    }


  } // end main()

  static void printFail(String desc, Object expected, Object result) {
    System.out.println(desc+" expected "+expected.toString()+" ("+result.toString()+")");
  }

} // end class Main
